// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

import * as List           from "bs-platform/lib/es6/list.js";
import * as Block          from "bs-platform/lib/es6/block.js";
import * as Curry          from "bs-platform/lib/es6/curry.js";
import * as Overbots_flags from "./overbots_flags.js";
import * as Overbots_types from "./overbots_types.js";

function shown(model) {
  return Overbots_flags.bool_flag_exists(/* InternalPowerEnabled */0, model);
}

function get_value_range() {
  return /* tuple */[
          0.0,
          100.0
        ];
}

var Energy = /* module */[
  /* id : Energy */0,
  /* shown */shown,
  /* get_value_range */get_value_range
];

function shown$1(model) {
  return Overbots_flags.bool_flag_exists(/* DrillDeployed */3, model);
}

function get_value_range$1() {
  return /* tuple */[
          0.0,
          10.0
        ];
}

var IronOxide = /* module */[
  /* id : IronOxide */1,
  /* shown */shown$1,
  /* get_value_range */get_value_range$1
];

function shown$2(model) {
  return Overbots_flags.bool_flag_exists(/* DrillDeployed */3, model);
}

function get_value_range$2() {
  return /* tuple */[
          0.0,
          2.0
        ];
}

var RawSilicon = /* module */[
  /* id : RawSilicon */2,
  /* shown */shown$2,
  /* get_value_range */get_value_range$2
];

var all_resources = Curry._3(Overbots_types.ResourceMap[/* add */3], /* RawSilicon */2, RawSilicon, Curry._3(Overbots_types.ResourceMap[/* add */3], /* IronOxide */1, IronOxide, Curry._3(Overbots_types.ResourceMap[/* add */3], /* Energy */0, Energy, Overbots_types.ResourceMap[/* empty */0])));

function get_resource_module(rid) {
  return Curry._2(Overbots_types.ResourceMap[/* find */21], rid, all_resources);
}

function get_resource_value(rid, model) {
  return Curry._2(Overbots_types.ResourceMap[/* find */21], rid, model[/* resource_values */4]);
}

function set_resource_value(rid, value, model) {
  var R = Curry._2(Overbots_types.ResourceMap[/* find */21], rid, all_resources);
  var match = Curry._1(R[/* get_value_range */2], model);
  if (value < match[0]) {
    return /* ValueTooLow */0;
  } else {
    var rmax = match[1];
    if (value > rmax) {
      var resource_values = Curry._3(Overbots_types.ResourceMap[/* add */3], rid, rmax, model[/* resource_values */4]);
      var newrecord = model.slice();
      return /* ValueTooHigh */Block.__(0, [
                (newrecord[/* resource_values */4] = resource_values, newrecord),
                value - rmax
              ]);
    } else {
      var resource_values$1 = Curry._3(Overbots_types.ResourceMap[/* add */3], rid, value, model[/* resource_values */4]);
      var newrecord$1 = model.slice();
      return /* ValueSuccess */Block.__(1, [(newrecord$1[/* resource_values */4] = resource_values$1, newrecord$1)]);
    }
  }
}

function add_resource_value(rid, delta, model) {
  var value = delta + get_resource_value(rid, model);
  return set_resource_value(rid, value, model);
}

function cost_resource(rid, delta, model) {
  var match = add_resource_value(rid, -delta, model);
  if (typeof match === "number" || !match.tag) {
    return /* None */0;
  } else {
    return /* Some */[match[0]];
  }
}

function cost_resources(resources, model) {
  var aux = function (model, param) {
    if (model) {
      return cost_resource(param[0], param[1], model[0]);
    } else {
      return /* None */0;
    }
  };
  return List.fold_left(aux, /* Some */[model], resources);
}

function resource_folder(rid, _, acc) {
  return Curry._3(Overbots_types.ResourceMap[/* add */3], rid, 0.0, acc);
}

var init_resources_values = Curry._3(Overbots_types.ResourceMap[/* fold */10], resource_folder, all_resources, Overbots_types.ResourceMap[/* empty */0]);

var init_cache = /* record */[
  /* transformers : [] */0,
  /* resource_deltas */init_resources_values
];

function reset_cache(model) {
  var newrecord = model.slice();
  newrecord[/* cache */8] = init_cache;
  return newrecord;
}

var displayed_resources = /* :: */[
  /* tuple */[
    "",
    "global",
    /* :: */[
      /* tuple */[
        /* Energy */0,
        "Energy",
        "energy"
      ],
      /* [] */0
    ]
  ],
  /* :: */[
    /* tuple */[
      "Raw",
      "raw",
      /* :: */[
        /* tuple */[
          /* IronOxide */1,
          "Iron Oxide",
          "ironoxide"
        ],
        /* :: */[
          /* tuple */[
            /* RawSilicon */2,
            "Raw Silicon",
            "rawsilicon"
          ],
          /* [] */0
        ]
      ]
    ],
    /* [] */0
  ]
];

export {
  Energy                ,
  IronOxide             ,
  RawSilicon            ,
  all_resources         ,
  displayed_resources   ,
  get_resource_module   ,
  get_resource_value    ,
  set_resource_value    ,
  add_resource_value    ,
  cost_resource         ,
  cost_resources        ,
  init_resources_values ,
  init_cache            ,
  reset_cache           ,
  
}
/* all_resources Not a pure module */
