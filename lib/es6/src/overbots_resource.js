// Generated by BUCKLESCRIPT VERSION 1.7.3, PLEASE EDIT WITH CARE
'use strict';

import * as $$Map          from "bs-platform/lib/es6/map.js";
import * as List           from "bs-platform/lib/es6/list.js";
import * as Block          from "bs-platform/lib/es6/block.js";
import * as Curry          from "bs-platform/lib/es6/curry.js";
import * as $$String       from "bs-platform/lib/es6/string.js";
import * as Overbots_flags from "./overbots_flags.js";
import * as Overbots_types from "./overbots_types.js";

function shown(model) {
  return Overbots_flags.bool_flag_exists(/* InternalPowerEnabled */0, model);
}

function get_value_range() {
  return /* tuple */[
          0.0,
          100.0
        ];
}

function name() {
  return "Energy";
}

var Energy = /* module */[
  /* id : Energy */0,
  /* shown */shown,
  /* get_value_range */get_value_range,
  /* idname */"energy",
  /* name */name
];

function shown$1(model) {
  return Overbots_flags.bool_flag_exists(/* DrillDeployed */3, model);
}

function get_value_range$1() {
  return /* tuple */[
          0.0,
          10.0
        ];
}

function name$1() {
  return "Iron Oxide";
}

var IronOxide = /* module */[
  /* id : IronOxide */1,
  /* shown */shown$1,
  /* get_value_range */get_value_range$1,
  /* idname */"ironoxide",
  /* name */name$1
];

function shown$2(model) {
  return Overbots_flags.bool_flag_exists(/* DrillDeployed */3, model);
}

function get_value_range$2() {
  return /* tuple */[
          0.0,
          2.0
        ];
}

function name$2() {
  return "RawSilicon";
}

var RawSilicon = /* module */[
  /* id : RawSilicon */2,
  /* shown */shown$2,
  /* get_value_range */get_value_range$2,
  /* idname */"rawsilicon",
  /* name */name$2
];

var all_resources_001 = /* :: */[
  IronOxide,
  /* :: */[
    RawSilicon,
    /* [] */0
  ]
];

var all_resources = /* :: */[
  Energy,
  all_resources_001
];

var id_resource_mapping = List.fold_left(function (map, r) {
      return Curry._3(Overbots_types.ResourceMap[/* add */3], r[/* id */0], r, map);
    }, Overbots_types.ResourceMap[/* empty */0], all_resources);

var StringMap = $$Map.Make([$$String.compare]);

var idname_resource_mapping = List.fold_left(function (map, r) {
      return Curry._3(StringMap[/* add */3], r[/* idname */3], r, map);
    }, StringMap[/* empty */0], all_resources);

function get_resource_module(rid) {
  return Curry._2(Overbots_types.ResourceMap[/* find */21], rid, id_resource_mapping);
}

function get_resource_module_by_idname(idname) {
  if (Curry._2(StringMap[/* mem */2], idname, idname_resource_mapping)) {
    return /* Some */[Curry._2(StringMap[/* find */21], idname, idname_resource_mapping)];
  } else {
    return /* None */0;
  }
}

var displayed_resources_000 = /* tuple */[
  "",
  "global",
  /* :: */[
    Curry._2(Overbots_types.ResourceMap[/* find */21], /* Energy */0, id_resource_mapping),
    /* [] */0
  ]
];

var displayed_resources_001 = /* :: */[
  /* tuple */[
    "Raw",
    "raw",
    /* :: */[
      Curry._2(Overbots_types.ResourceMap[/* find */21], /* IronOxide */1, id_resource_mapping),
      /* :: */[
        Curry._2(Overbots_types.ResourceMap[/* find */21], /* RawSilicon */2, id_resource_mapping),
        /* [] */0
      ]
    ]
  ],
  /* [] */0
];

var displayed_resources = /* :: */[
  displayed_resources_000,
  displayed_resources_001
];

function get_resource_value(rid, model) {
  return Curry._2(Overbots_types.ResourceMap[/* find */21], rid, model[/* resource_values */4]);
}

function set_resource_value(rid, value, model) {
  var R = Curry._2(Overbots_types.ResourceMap[/* find */21], rid, id_resource_mapping);
  var match = Curry._1(R[/* get_value_range */2], model);
  if (value < match[0]) {
    return /* ValueTooLow */0;
  } else {
    var rmax = match[1];
    if (value > rmax) {
      var resource_values = Curry._3(Overbots_types.ResourceMap[/* add */3], rid, rmax, model[/* resource_values */4]);
      var newrecord = model.slice();
      return /* ValueTooHigh */Block.__(0, [
                (newrecord[/* resource_values */4] = resource_values, newrecord),
                value - rmax
              ]);
    } else {
      var resource_values$1 = Curry._3(Overbots_types.ResourceMap[/* add */3], rid, value, model[/* resource_values */4]);
      var newrecord$1 = model.slice();
      return /* ValueSuccess */Block.__(1, [(newrecord$1[/* resource_values */4] = resource_values$1, newrecord$1)]);
    }
  }
}

function add_resource_value(rid, delta, model) {
  var value = delta + get_resource_value(rid, model);
  return set_resource_value(rid, value, model);
}

function cost_resource(rid, delta, model) {
  var match = add_resource_value(rid, -delta, model);
  if (typeof match === "number" || !match.tag) {
    return /* None */0;
  } else {
    return /* Some */[match[0]];
  }
}

function cost_resources(resources, model) {
  var aux = function (model, param) {
    if (model) {
      return cost_resource(param[0], param[1], model[0]);
    } else {
      return /* None */0;
    }
  };
  return List.fold_left(aux, /* Some */[model], resources);
}

function resource_folder(acc, r) {
  return Curry._3(Overbots_types.ResourceMap[/* add */3], r[/* id */0], 0.0, acc);
}

var init_resources_values = List.fold_left(resource_folder, Overbots_types.ResourceMap[/* empty */0], all_resources);

var init_cache = /* record */[
  /* transformers : [] */0,
  /* resource_deltas */init_resources_values
];

function reset_cache(model) {
  var newrecord = model.slice();
  newrecord[/* cache */8] = init_cache;
  return newrecord;
}

export {
  Energy                        ,
  IronOxide                     ,
  RawSilicon                    ,
  all_resources                 ,
  id_resource_mapping           ,
  StringMap                     ,
  idname_resource_mapping       ,
  get_resource_module           ,
  get_resource_module_by_idname ,
  displayed_resources           ,
  get_resource_value            ,
  set_resource_value            ,
  add_resource_value            ,
  cost_resource                 ,
  cost_resources                ,
  init_resources_values         ,
  init_cache                    ,
  reset_cache                   ,
  
}
/* id_resource_mapping Not a pure module */
