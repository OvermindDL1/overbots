// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

import * as Block                  from "bs-platform/lib/es6/block.js";
import * as Curry                  from "bs-platform/lib/es6/curry.js";
import * as Tea_ex                 from "bucklescript-tea/lib/es6/src/tea_ex.js";
import * as Tea_app                from "bucklescript-tea/lib/es6/src/tea_app.js";
import * as Tea_cmd                from "bucklescript-tea/lib/es6/src/tea_cmd.js";
import * as Tea_sub                from "bucklescript-tea/lib/es6/src/tea_sub.js";
import * as Tea_task               from "bucklescript-tea/lib/es6/src/tea_task.js";
import * as Tea_time               from "bucklescript-tea/lib/es6/src/tea_time.js";
import * as Overbots_view          from "./overbots_view.js";
import * as Overbots_types         from "./overbots_types.js";
import * as Overbots_update        from "./overbots_update.js";
import * as Overbots_buttons       from "./overbots_buttons.js";
import * as Overbots_resource      from "./overbots_resource.js";
import * as Tea_animationframe     from "bucklescript-tea/lib/es6/src/tea_animationframe.js";
import * as Overbots_serialization from "./overbots_serialization.js";

var serialized_name = "Overbots";

function init() {
  var model = /* record */[
    /* start_realtime */-1.0,
    /* current_realtime */-1.0,
    /* gametime */0.0,
    /* msgs : [] */0,
    /* resource_values */Overbots_resource.init_resources_values,
    /* bool_flags */Overbots_types.init_bool_flags,
    /* int_flags */Overbots_types.init_int_flags,
    /* float_flags */Overbots_types.init_float_flags,
    /* cache */Overbots_resource.init_cache
  ];
  var load_data_task = Curry._1(Tea_ex.LocalStorage[/* getItem */4], serialized_name);
  return /* tuple */[
          model,
          Tea_cmd.batch(/* :: */[
                Tea_task.attemptOpt((function (param) {
                        if (param.tag) {
                          return /* None */0;
                        } else {
                          return /* Some */[/* LoadData */Block.__(2, [param[0]])];
                        }
                      }), load_data_task),
                /* [] */0
              ])
        ];
}

function update(model, param) {
  if (typeof param === "number") {
    var json_string = Overbots_serialization.json_string_of_model(0, model);
    return /* tuple */[
            model,
            Tea_task.attemptOpt((function () {
                    return /* None */0;
                  }), Curry._2(Tea_ex.LocalStorage[/* setItem */7], serialized_name, json_string))
          ];
  } else {
    switch (param.tag | 0) {
      case 0 : 
          var time = param[0][/* time */0] * 0.001;
          var model$1 = model[/* start_realtime */0] >= 0.0 ? model : /* record */[
              /* start_realtime */time,
              /* current_realtime */time,
              /* gametime */0.0,
              /* msgs */model[/* msgs */3],
              /* resource_values */model[/* resource_values */4],
              /* bool_flags */model[/* bool_flags */5],
              /* int_flags */model[/* int_flags */6],
              /* float_flags */model[/* float_flags */7],
              /* cache */model[/* cache */8]
            ];
          return Overbots_update.update_state(model$1, time);
      case 1 : 
          return Overbots_buttons.perform_button(model, param[0]);
      case 2 : 
          var json_string$1 = param[0];
          if (json_string$1 === "") {
            return /* tuple */[
                    model,
                    Tea_cmd.none
                  ];
          } else {
            var match = Overbots_serialization.model_of_json_string(json_string$1);
            if (match.tag) {
              return /* tuple */[
                      model,
                      Tea_task.attemptOpt((function () {
                              return /* None */0;
                            }), Curry._2(Tea_ex.LocalStorage[/* setItem */7], serialized_name, ""))
                    ];
            } else {
              return /* tuple */[
                      match[0],
                      Tea_cmd.none
                    ];
            }
          }
          break;
      
    }
  }
}

function subscriptions() {
  return Tea_sub.batch(/* :: */[
              Tea_animationframe.every(/* None */0, Overbots_types.updateFrame),
              /* :: */[
                Tea_time.every(10.0 * Tea_time.second, (function () {
                        return /* SaveData */0;
                      })),
                /* [] */0
              ]
            ]);
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */Overbots_view.view,
  /* subscriptions */subscriptions
];

function main(param, param$1) {
  return Tea_app.standardProgram(partial_arg, param, param$1);
}

export {
  serialized_name ,
  init            ,
  update          ,
  subscriptions   ,
  main            ,
  
}
/* Overbots_view Not a pure module */
