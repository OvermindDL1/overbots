// Generated by BUCKLESCRIPT VERSION 1.7.5, PLEASE EDIT WITH CARE
'use strict';

import * as List              from "bs-platform/lib/es6/list.js";
import * as Block             from "bs-platform/lib/es6/block.js";
import * as Curry             from "bs-platform/lib/es6/curry.js";
import * as Tea_json          from "bucklescript-tea/lib/es6/src/tea_json.js";
import * as Overbots_types    from "./overbots_types.js";
import * as Overbots_resource from "./overbots_resource.js";

function json_of_gamemsg(param) {
  return Curry._1(Tea_json.Encoder[/* object_ */6], /* :: */[
              /* tuple */[
                "time",
                Curry._1(Tea_json.Encoder[/* float */3], param[0])
              ],
              /* :: */[
                /* tuple */[
                  "msg",
                  Curry._1(Tea_json.Encoder[/* string */1], param[1])
                ],
                /* [] */0
              ]
            ]);
}

function apply_on_tuple2(fun0, fun1, param) {
  return /* tuple */[
          Curry._1(fun0, param[0]),
          Curry._1(fun1, param[1])
        ];
}

function string_of_resource_flag(rid) {
  return Overbots_resource.get_resource_module(rid)[/* idname */3];
}

function string_of_bool_flag(param) {
  switch (param) {
    case 0 : 
        return "InternalPowerEnabled";
    case 1 : 
        return "SolarPanelsReadyToUnfold";
    case 2 : 
        return "SolarPanelsGenerating";
    case 3 : 
        return "DrillDeployed";
    
  }
}

function string_of_int_flag() {
  return "TimeActionIdx";
}

function string_of_float_flag() {
  return "BasicSolarPanelSelfGeneration";
}

function json_string_of_model(indent, model) {
  var partial_arg = Tea_json.Encoder[/* float */3];
  var partial_arg$1 = Tea_json.Encoder[/* int */2];
  var partial_arg$2 = Tea_json.Encoder[/* float */3];
  return Curry._2(Tea_json.Encoder[/* encode */0], indent, Curry._1(Tea_json.Encoder[/* object_ */6], /* :: */[
                  /* tuple */[
                    "start_realtime",
                    Curry._1(Tea_json.Encoder[/* float */3], model[/* start_realtime */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "current_realtime",
                      Curry._1(Tea_json.Encoder[/* float */3], model[/* current_realtime */1])
                    ],
                    /* :: */[
                      /* tuple */[
                        "gametime",
                        Curry._1(Tea_json.Encoder[/* float */3], model[/* gametime */2])
                      ],
                      /* :: */[
                        /* tuple */[
                          "msgs",
                          Curry._1(Tea_json.Encoder[/* list */8], List.map(json_of_gamemsg, model[/* msgs */3]))
                        ],
                        /* :: */[
                          /* tuple */[
                            "resource_values",
                            Curry._1(Tea_json.Encoder[/* object_ */6], List.map((function (param) {
                                        return apply_on_tuple2(string_of_resource_flag, partial_arg, param);
                                      }), Curry._1(Overbots_types.ResourceMap[/* bindings */16], model[/* resource_values */4])))
                          ],
                          /* :: */[
                            /* tuple */[
                              "bool_flags",
                              Curry._1(Tea_json.Encoder[/* list */8], List.map((function (bf) {
                                          return Curry._1(Tea_json.Encoder[/* string */1], string_of_bool_flag(bf));
                                        }), Curry._1(Overbots_types.BoolFlagSet[/* elements */19], model[/* bool_flags */5])))
                            ],
                            /* :: */[
                              /* tuple */[
                                "int_flags",
                                Curry._1(Tea_json.Encoder[/* object_ */6], List.map((function (param) {
                                            return apply_on_tuple2(string_of_int_flag, partial_arg$1, param);
                                          }), Curry._1(Overbots_types.IntFlagMap[/* bindings */16], model[/* int_flags */6])))
                              ],
                              /* :: */[
                                /* tuple */[
                                  "float_flags",
                                  Curry._1(Tea_json.Encoder[/* object_ */6], List.map((function (param) {
                                              return apply_on_tuple2(string_of_float_flag, partial_arg$2, param);
                                            }), Curry._1(Overbots_types.FloatFlagMap[/* bindings */16], model[/* float_flags */7])))
                                ],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]));
}

var decoder_of_gamemsg = Curry._1(Tea_json.Decoder[/* oneOf */15], /* :: */[
      Curry._3(Tea_json.Decoder[/* map2 */17], Overbots_types.timeMsg, Curry._2(Tea_json.Decoder[/* field */11], "time", Tea_json.Decoder[/* float */4]), Curry._2(Tea_json.Decoder[/* field */11], "msg", Tea_json.Decoder[/* string */2])),
      /* [] */0
    ]);

var decoder_of_resource_values = Curry._2(Tea_json.Decoder[/* map */16], (function (param) {
        return List.fold_left((function (map, param) {
                      var match = Overbots_resource.get_resource_module_by_idname(param[0]);
                      if (match) {
                        return Curry._3(Overbots_types.ResourceMap[/* add */3], match[0][/* id */0], param[1], map);
                      } else {
                        return map;
                      }
                    }), Overbots_resource.init_resources_values, param);
      }), Curry._1(Tea_json.Decoder[/* keyValuePairs */9], Tea_json.Decoder[/* float */4]));

var partial_arg = Overbots_types.BoolFlagSet[/* empty */0];

var decoder_of_bool_flags = Curry._2(Tea_json.Decoder[/* map */16], (function (param) {
        return List.fold_left((function (set, flag) {
                      return Curry._2(Overbots_types.BoolFlagSet[/* add */3], flag, set);
                    }), partial_arg, param);
      }), Curry._1(Tea_json.Decoder[/* list */7], Curry._2(Tea_json.Decoder[/* andThen */27], (function (str) {
                switch (str) {
                  case "DrillDeployed" : 
                      return Curry._1(Tea_json.Decoder[/* succeed */24], /* DrillDeployed */3);
                  case "InternalPowerEnabled" : 
                      return Curry._1(Tea_json.Decoder[/* succeed */24], /* InternalPowerEnabled */0);
                  case "SolarPanelsGenerating" : 
                      return Curry._1(Tea_json.Decoder[/* succeed */24], /* SolarPanelsGenerating */2);
                  case "SolarPanelsReadyToUnfold" : 
                      return Curry._1(Tea_json.Decoder[/* succeed */24], /* SolarPanelsReadyToUnfold */1);
                  default:
                    return Curry._1(Tea_json.Decoder[/* fail */25], "Unknown bool_flag of: " + str);
                }
              }), Tea_json.Decoder[/* string */2])));

var decoder_of_int_flags = Curry._2(Tea_json.Decoder[/* andThen */27], (function (lst) {
        var match = List.fold_left((function (rmap, param) {
                var id = param[0];
                if (rmap.tag) {
                  return rmap;
                } else if (id === "TimeActionIdx") {
                  return /* Ok */Block.__(0, [Curry._3(Overbots_types.IntFlagMap[/* add */3], /* TimeActionIdx */0, param[1], rmap[0])]);
                } else {
                  return /* Error */Block.__(1, ["Unknown Int Flag: " + id]);
                }
              }), /* Ok */Block.__(0, [Overbots_types.init_int_flags]), lst);
        if (match.tag) {
          return Curry._1(Tea_json.Decoder[/* fail */25], match[0]);
        } else {
          return Curry._1(Tea_json.Decoder[/* succeed */24], match[0]);
        }
      }), Curry._1(Tea_json.Decoder[/* keyValuePairs */9], Tea_json.Decoder[/* int */3]));

var decoder_of_float_flags = Curry._2(Tea_json.Decoder[/* andThen */27], (function (lst) {
        var match = List.fold_left((function (rmap, param) {
                var id = param[0];
                if (rmap.tag) {
                  return rmap;
                } else if (id === "BasicSolarPanelSelfGeneration") {
                  return /* Ok */Block.__(0, [Curry._3(Overbots_types.FloatFlagMap[/* add */3], /* BasicSolarPanelSelfGeneration */0, param[1], rmap[0])]);
                } else {
                  return /* Error */Block.__(1, ["Unknown Float Flag: " + id]);
                }
              }), /* Ok */Block.__(0, [Overbots_types.init_float_flags]), lst);
        if (match.tag) {
          return Curry._1(Tea_json.Decoder[/* fail */25], match[0]);
        } else {
          return Curry._1(Tea_json.Decoder[/* succeed */24], match[0]);
        }
      }), Curry._1(Tea_json.Decoder[/* keyValuePairs */9], Tea_json.Decoder[/* float */4]));

function model_of_json_string(json_string) {
  var construct_model = function (start_realtime, current_realtime, gametime, msgs, resource_values, bool_flags, int_flags, float_flags) {
    return /* record */[
            /* start_realtime */start_realtime,
            /* current_realtime */current_realtime,
            /* gametime */gametime,
            /* msgs */msgs,
            /* resource_values */resource_values,
            /* bool_flags */bool_flags,
            /* int_flags */int_flags,
            /* float_flags */float_flags,
            /* cache */Overbots_resource.init_cache
          ];
  };
  var decoder = Curry.app(Tea_json.Decoder[/* map8 */23], [
        construct_model,
        Curry._2(Tea_json.Decoder[/* field */11], "start_realtime", Tea_json.Decoder[/* float */4]),
        Curry._2(Tea_json.Decoder[/* field */11], "current_realtime", Tea_json.Decoder[/* float */4]),
        Curry._2(Tea_json.Decoder[/* field */11], "gametime", Tea_json.Decoder[/* float */4]),
        Curry._2(Tea_json.Decoder[/* field */11], "msgs", Curry._1(Tea_json.Decoder[/* list */7], decoder_of_gamemsg)),
        Curry._2(Tea_json.Decoder[/* field */11], "resource_values", decoder_of_resource_values),
        Curry._2(Tea_json.Decoder[/* field */11], "bool_flags", decoder_of_bool_flags),
        Curry._2(Tea_json.Decoder[/* field */11], "int_flags", decoder_of_int_flags),
        Curry._2(Tea_json.Decoder[/* field */11], "float_flags", decoder_of_float_flags)
      ]);
  return Curry._2(Tea_json.Decoder[/* decodeString */31], decoder, json_string);
}

var E = 0;

var D = 0;

export {
  E                          ,
  D                          ,
  json_of_gamemsg            ,
  apply_on_tuple2            ,
  string_of_resource_flag    ,
  string_of_bool_flag        ,
  string_of_int_flag         ,
  string_of_float_flag       ,
  json_string_of_model       ,
  decoder_of_gamemsg         ,
  decoder_of_resource_values ,
  decoder_of_bool_flags      ,
  decoder_of_int_flags       ,
  decoder_of_float_flags     ,
  model_of_json_string       ,
  
}
/* decoder_of_gamemsg Not a pure module */
